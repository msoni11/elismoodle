/**
 * Generic JavaScript methods for a results selection relaged page(s).
 *
 * ELIS(TM): Enterprise Learning Intelligence Suite
 * Copyright (C) 2008-2010 Remote-Learner.net Inc (http://www.remote-learner.net)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @package    elis
 * @subpackage curriculummanagement
 * @author     Remote-Learner.net Inc
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL
 * @copyright  (C) 2008-2010 Remote Learner.net Inc http://www.remote-learner.net
 *
 */

/**
 * DHTML Table
 * 
 * To use the DHTML table you must generate a table with at least one row of form elements in it.
 * The settings form expects there to be no header row, and a single button row at the end.
 * Each of the form elements must be prepended with the table id and a "row" number, separated by
 * underscores, this prefix will allow cacheBuild to find and submit the elements.  
 * Initially the row numbers should start with 0 and be continuous.  Otherwise the row index numbers
 * won't be generated properly and you may lose data due to duplicate element ids generated by
 * the addRow method.
 * 
 * In the table, input fields should not share table cells with selects.  If they do, when the
 * addrow method creates new rows the select fields that share a cell with an input fields will have
 * blank value fields.  As a note this affects all input fields because of IE7, which strips the
 * "type" attribute from text input fields.  So all input fields in the template row have to be
 * stripped of values when creating a new row to ensure that the text fields are blanked.
 * 
 * To use the preview functionality, you will need to add an object tag to the form, the object
 * tag must be inside another element that uses the name $prefix +'_frame' so that it will work
 * correctly in chrome which does not support dynamic updating of object fields.  The iframe tag
 * has been deprecated and is not valid XHTML and thus is not used for that reason.
 */
function dhtml_table(formid, prefix, fields) {
    this.header_rows  = 0;
    this.footer_rows  = 1;
    this.table_prefix = prefix;
    this.preview      = null;
    this.table        = null;
    this.add          = null;
    this.enable       = null;
    this.fields       = fields;
    this.form         = document.getElementById(formid);
    this.setup_done   = 0;
    
    /**
     * Set the add row button
     */
    this.set_add_button = function(add_button) {
        var add = document.getElementById(add_button);

        if (add != null) {
            add.table_prefix = this.table_prefix;
            add.onclick = this.addRow;
            add.header_rows = this.header_rows;
            add.footer_rows = this.footer_rows;
            if (this.table != null) {
                add.table = this.table;
            }
            this.add = add;
        }
    }
    
    /**
     * Set enable button
     */
    this.set_enable_field = function(enable_field) {
        var enable   = document.getElementById(enable_field);

        if (enable != null) {
            enable.table_prefix = this.table_prefix;
            enable.onchange = this.toggle;
            enable.fields = this.fields;
            this.enable = enable;
        }
    }

    /**
     * Set footer rows
     */
    this.set_footer_rows = function(rows) {
    	this.footer_rows = rows;
    	if (this.add != null) {
            this.add.footer_rows = rows;
    	}
    }

    /**
     * Set header rows
     */
    this.set_header_rows = function(rows) {
    	this.header_rows = rows;
        if (this.add != null) {
            this.add.header_rows = rows;
        }
    }

    /**
     * Set id prefix
     */
    this.set_id_prefix = function(id_prefix) {
    	this.id_prefix = id_prefix;
    }

    /**
     * Set preview
     */
    this.set_preview = function(previewid, previewurl) {
        this.preview = document.getElementById(previewid);
    }

    /**
     * Set table
     */
    this.set_table = function(tableid) {

        var table = document.getElementById(tableid);
        if (table != null) {
            table.newRowIndex = table.rows.length-1;
            this.table = table;

            if (this.add != null) {
                this.add.table = this.table;
            }

            // The form needs to know about the table.
            this.form.table   = this.table;
        }
    }

    /**
     * Setup the form
     */
    this.setup_form = function() {

        if (this.form != null) {
            if (this.form.cachelist == null) {
                this.form.cachelist = [];
            }
            this.form.cachelist[this.form.cachelist.length] = this;
            this.form.table_prefix = this.table_prefix;
            this.form.fields  = fields;

            // Only setup the onsubmit once.
            if (this.form.setup_done == null) {

                if (this.form.onsubmit != null) {
                    this.form.oldsubmit = this.form.onsubmit;
                } else {
                    this.form.oldsubmit = function(event) {
                        return true;
                    };
                }

                this.form.onsubmit = function(event) {
                    for (var i=0; i<this.cachelist.length; i += 1) {
                        this.cachelist[i].cacheBuild();
                    }
                    return this.oldsubmit(event);
                };

                this.form.setup_done = 1;
            }
        }
    }

    /**
     * Process the settings and produce the submitted value for the table
     */
    this.cacheBuild = function() {
        var field;
        var value;
        var data  = '';
        var horiz  = '';
        var vert   = '';
        var type   = '';
        var prefix = '';
        var values = [];
        var fields = this.fields.split(',');
        var cache  = document.getElementById(this.table_prefix +'_cache');

        for (var i = 0; i < this.table.newRowIndex; i += 1) {
            prefix = this.id_prefix + this.table_prefix +'_'+ i +'_';
            value = document.getElementById(prefix + fields[0]);

            // Skip deleted rows
            if (value == null) {
                continue;
            }

            values[0] = value.value;

            for (var h = 1; h < fields.length; h += 1) {
                field = document.getElementById(prefix + fields[h]);

                values[h] = '';
                if (field != null) {
                    values[h]  = field.value;
                }
            }

            data = data + values.join(',') +',';
        }

        cache.value = data;
    }

    /**
     * Add a row from the table
     */
    this.addRow = function() {
      	var template = this.table.rows[this.header_rows].cells;
        var count = this.table.rows.length-this.footer_rows;
        var row = this.table.insertRow(count);
        var cell;
        var html;
        var frame;
        var frameid;

        var prefix_regex = new RegExp(this.table_prefix +"_[0-9]+_");
        var frame_regex  = new RegExp("[A-Za-z0-9_]*_frame");
        var oldprefix    = '';
        var newprefix    = this.table_prefix +'_'+ this.table.newRowIndex +'_';

        for (var i =0; i < template.length; i += 1) {
            oldprefix = prefix_regex.exec(template[i].innerHTML);
            if (oldprefix != null) {
                break;
            }
        }

        prefix_regex = new RegExp(oldprefix, "g");

        for (var i = 0; i < template.length; i += 1) {
            cell = row.insertCell(-1);
            if (i < 2) {
                cell.align = 'center';
            }
            html = template[i].innerHTML.replace(prefix_regex, newprefix);
            html = html.replace(/selected=\"selected\"/g, " ");
            html = html.replace(/ selected /g, " ");
            if (html.match(/<input/i) != null) {
                html = html.replace(/value=\"?[^\" >]+\"?/g, "value=\"\"");
            }
            cell.innerHTML=html;

            frameid = frame_regex.exec(html);
            if (frameid != null) {
                frame = document.getElementById(frameid)
                if (frame != null) {
                    frame.innerHTML = '&nbsp;';
                }
            }
        }
        this.table.newRowIndex += 1;
    }

    /**
     * Delete a row from the table
     * 
     * This method takes parameters so it can be called from anchors.
     * 
     * @param string tablied The table id
     * @param string rowid   The id of the row to be deleted
     */
    this.deleteRow = function(link) {
        var parent = link.parentNode;
        
        while (parent.nodeName != 'TR') {
            parent = parent.parentNode;
            if (parent == null) {
                break;
            }
        }

        if (parent != null) {
            var count = this.table.rows.length - this.footer_rows;
            if (count <= 2) {
                // About to delete the only remaining score row, so add new one
                this.addRow();
            }
            this.table.deleteRow(parent.rowIndex);
        } else {
            alert("Couldn't find row!")
        }
    }
    
    /**
     * Update the preview field
     * 
     * This method rebuilds the cache and posts it to the preview field.  It should be called
     * directly from the form elements.
     */
    this.update = function() {
        this.cacheBuild();
        if (this.preview != null) {
            // Frame rewriting is required because chrome does not update objects when their data field is changed.
            // Firefox and IE do update objects when their data fields are changed.
            var frame = document.getElementById(this.preview.id +'_frame');
            var cache = document.getElementById(this.table_prefix +'_cache');
            var html  = frame.innerHTML;
            var regex = new RegExp(' data="[^"]*"');
            var url   = this.preview.data;
            var pos   = url.indexOf('?');

            if (pos > -1) {
                url = url.slice(0,pos);
            }

            url = url +'?cache='+ encodeURIComponent(cache.value);
            html = html.replace(regex, ' data="'+ url +'"');
            frame.innerHTML = html;
        }
    }

    /**
     * Toggle the table on and off
     */
    this.toggle = function() {
        var fields = this.fields.split(',');

        for (var i = 0; i < this.table.newRowIndex; i += 1) {
            prefix = this.table_prefix +'_'+ i +'_';
            field = document.getElementById(this.id_prefix + prefix + fields[0]);

            // Skip deleted rows
            if (field == null) {
                continue;
            }

            field.disabled = this.enable.checked;

            for (var h = 1; h < fields.length; h += 1) {
                field = document.getElementById(this.id_prefix + prefix + fields[h]);
                field.disabled = this.enable.checked;
            }
        }        
    }
   
    this.set_table(prefix +'_table');
    this.setup_form();
}
